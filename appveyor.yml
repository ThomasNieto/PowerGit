
version: '{build}'
image: Visual Studio 2017
clone_depth: 1
skip_tags: true
skip_branch_with_pr: true

install:
  - cd Source/GitAutomationCore && dotnet restore && cd ../..
  - ps: Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester
  - ps: Install-Module -Force -Scope CurrentUser -SkipPublisherCheck PSCodeCovIo

build_script:
  - cd Source/GitAutomationCore && dotnet build && dotnet publish -o ../../GitAutomationCore/Assemblies && cd ../..

before_test:
  - git config --global user.name "Test user"
  - git config --global user.email "test@test.com"

test_script:
  # Run tests, upload test results and generate coverage report
  - ps: |
      $testResultsFile = ".\TestsResults.xml"
      $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru -CodeCoverage . -CodeCoverageOutputFile coverage.xml
      (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
      Export-CodeCovIoJson -CodeCoverage $res.CodeCoverage -RepoRoot $pwd -Path coverage.json
      if ($res.FailedCount -gt 0) {
        throw "$($res.FailedCount) tests failed."
      }

after_test:
  # Upload coverage report to codecov
  - ps: |
      $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
      Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
      bash codecov.sh -f coverage.json
