parameters:
  name: ''
  queue: ''

phases:
  - phase: ${{ parameters.name }}
    queue: ${{ parameters.queue }}
    steps:
      - script: |
          git config --global user.name "GIVEN_NAME SURNAME"
          git config --global user.email "email@example.com"
        displayName: Configure git user
      - powershell: |
          Install-Module -Force -Scope CurrentUser PSScriptAnalyzer
          Invoke-ScriptAnalyzer -Path . -Recurse | Format-List -Property RuleName,Message,ScriptPath,Line,Column
      - script: |
          cd Source/GitAutomationCore
          dotnet publish -o ../../GitAutomationCore/Assemblies
          cd ../..
        displayName: Build assemblies
      - powershell: |
          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester
          Install-Module -Force -Scope CurrentUser PSCodeCovIo
          $ProgressPreference = "SilentlyContinue"
          $res = Invoke-Pester -PassThru -CodeCoverage GitAutomationCore/Functions/*.ps1 -CodeCoverageOutputFile coverage.xml -OutputFile testresults.xml -OutputFormat NUnitXML
          Export-CodeCovIoJson -CodeCoverage $res.CodeCoverage -RepoRoot $pwd -Path coverage.json
          if ($res.FailedCount -gt 0) {
            throw "$($res.FailedCount) tests failed."
          }
        displayName: Run tests
      - task: PublishTestResults@2
        inputs:
          testRunner: nUnit
          testResultsFiles: 'testresults.xml'
          testRunTitle: ${{ parameters.name }}
        condition: always()
        displayName: Publish test results
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: JaCoCo
          summaryFileLocation: coverage.xml
      - bash: bash <(curl -s https://codecov.io/bash) -f coverage.json -t $(CodeCovToken)
        displayName: Upload coverage to CodeCov
